## -*- mode: python -*-
##  $Id$
##
##  Windstille - A Jump'n Shoot Game
##  Copyright (C) 2004 Ingo Ruhnke <grumbel@gmx.de>
##
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

import os
import glob

opts = Options('custom.py')
opts.Add('CXX', 'The C++ compiler.', 'g++')
opts.Add('CXXFLAGS', 'The C++ compiler flags.', '-g -O0 -Wall')
opts.Add('CPPPATH', 'additional header path', '')
opts.Add('LIBPATH', 'additional library path', '')

opts.Add('DESTDIR', 'destination directory which gets appended to PREFIX', '')
opts.Add('PREFIX',  'PREFIX, ie. /usr/local', '/usr/local')

# opts.Add('RUBYDIR', 'Ruby directory', os.popen('ruby -e "require \'rbconfig\'; puts Config::CONFIG[\'archdir\']"').read()[:-1])

env = Environment(SHLIBPREFIX='',
                  ENV = os.environ,
                  options=opts)
Help(opts.GenerateHelpText(env))

clanLib_env = Environment()
clanLib_env.ParseConfig("pkg-config --cflags --libs clanApp-0.7 clanVorbis-0.7 clanCore-0.7 clanDisplay-0.7 clanGL-0.7 clanSignals-0.7 clanGUI-0.7 clanSound-0.7")

#windstille_wrap = env.Command('windstille_wrap.cxx', 'windstille.i',
#                              "swig -runtime -ruby -o $TARGET -c++ $SOURCE")

#env.Depends(windstille_wrap, ['windstille.i', 'scripting/game.hxx'])


windstille_source = [
    'animation_obj.cxx',
    'bomb.cxx', 
    'brush.cxx', 
    'controller_def.cxx', 
    'default_shoot.cxx', 
#    'dialog_manager.cxx', 
    'display.cxx', 
    'energiebar.cxx',
    'entity.cxx',
    'fonts.cxx', 
    'gameobj.cxx', 
    'globals.cxx', 
    'igel.cxx', 
    'laser_shoot.cxx', 
    'music_manager.cxx', 
    'player.cxx', 
    'screen.cxx',
    'sector.cxx',
    'tile.cxx', 
    'tile_factory.cxx', 
    'tile_map.cxx', 
#    'trigger.cxx', 
    'view.cxx', 
    'water_map.cxx', 
    'water_splash.cxx',
    'windstille_bonus.cxx', 
    'windstille_error.cxx', 
    'windstille_game.cxx', 
    'windstille_main.cxx', 
    'windstille_menu.cxx',

    # Lisp
    'lispreader.cxx',

    # Scripting Subdirectory
#    'scripting/game.cxx',

    # Collision stuff
    'collision_manager.cxx',

    # drawing
    'display/drawing_context.cxx',
    'display/scene_context.cxx',
    
    # Input Subdirectory
    'input/controller.cxx', 
    'input/input_manager.cxx', 
    'input/input_manager_impl.cxx', 
    'input/input_manager_custom.cxx', 
    'input/input_manager_player.cxx', 
    'input/input_button_input_device.cxx', 
    'input/input_axis_input_device.cxx', 
    'input/axis_button.cxx', 
    'input/button_axis.cxx', 
    'input/button_factory.cxx', 
    'input/axis_factory.cxx', 
    'input/input_recorder.cxx', 
    'input/multi_button.cxx',

    # Ruby stuff
#    'windstille_wrap.cxx',
#    'ruby_functor.cxx',
#    'ruby_object.cxx',
#    'coroutine_manager.cxx'
    ]

windstille_data = glob.glob('../data/images/*.png')     + \
                  glob.glob('../data/images/*.jpg')     + \
                  glob.glob('../data/images/*/*.jpg')   + \
                  glob.glob('../data/images/*/*.png')   + \
                  glob.glob('../data/music/*.ogg')      + \
                  glob.glob('../data/controller/*.scm') + \
                  glob.glob('../data/level/*.scm')

windstille_datadir = env['DESTDIR'] + env['PREFIX'] + '/share/games/windstille'

windstille_prg = env.Program('windstille',
                         windstille_source,
                         CPPPATH=[env['CPPPATH']] + clanLib_env['CPPPATH'],
                         LINKFLAGS = clanLib_env['LINKFLAGS'],
                         LIBPATH=['.'] + clanLib_env['LIBPATH'],
                         LIBS=clanLib_env['LIBS'])

ptest = env.Program('ptest',
                    ['ptest.cxx', 'particle_system.cxx', 'random.cxx'],
                    CPPPATH   = [env['CPPPATH']] + clanLib_env['CPPPATH'],
                    LINKFLAGS = clanLib_env['LINKFLAGS'],
                    LIBPATH   = clanLib_env['LIBPATH'],
                    LIBS      = clanLib_env['LIBS'])

# Unkomment ctest and comment ptest and windstille to compile
# ctest or alternativly fix the SConstruct file
#
#ctest = env.Program('ctest',
#                    ['ctest.cxx', 'collision_manager.cxx'],
#                    CPPPATH   = [env['CPPPATH']] + clanLib_env['CPPPATH'],
#                    LINKFLAGS = clanLib_env['LINKFLAGS'],
#                    LIBPATH   = clanLib_env['LIBPATH'],
#                    LIBS      = clanLib_env['LIBS'])

install_exec = env.Alias('install_exec',
                         Install(env['DESTDIR'] + env['PREFIX'] + '/games', windstille_prg))
install_data = env.Alias('install_data',
                         InstallAs([os.path.join(windstille_datadir, i[8:]) for i in windstille_data],
                                   windstille_data))
env.Alias('install', [install_data, install_exec])

# EOF #
