#!/usr/bin/ruby -w
##  Blender Thumbnail Generator
##  Copyright (C) 2007 Ingo Ruhnke <grumbel@gmx.de>
##
##  This program is free software; you can redistribute it and/or
##  modify it under the terms of the GNU General Public License
##  as published by the Free Software Foundation; either version 2
##  of the License, or (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
## 
##  You should have received a copy of the GNU General Public License
##  along with this program; if not, write to the Free Software
##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
##  02111-1307, USA.
##

require "RMagick"
require 'getoptlong'
require 'rdoc/usage'

$cfg_resolution = "512"
$cfg_output     = "/tmp/blender_thumbnail_output.png"
$cfg_render     = true
$cfg_thumbnail_script = "/home/ingo/projects/windstille/trunk/scripts/blender_thumbnail.py"
$cfg_layout = [
          [ "-90,0,0", # left
            "0,0,0", # front
            "0,90,90", # top
            "45,45,0", # 45-front
          ],
          ["90,0,0", # right
           "180,0,0", # back
           "0,-90,90", # bottom
           "135,45,0", # 45-back
          ]
         ]

GetoptLong.new(
               [ '--help',       '-h', GetoptLong::NO_ARGUMENT ],
               [ '--no-render',           GetoptLong::NO_ARGUMENT ],
               [ '--resolution', '-r', GetoptLong::REQUIRED_ARGUMENT ],
               [ '--layout'    , '-l', GetoptLong::REQUIRED_ARGUMENT ],
               [ '--output'    , '-o', GetoptLong::REQUIRED_ARGUMENT ]
               ).each{|opt, arg|
  case opt
  when '--help'
    puts "Usage: #{$0} [OPTION]... FILE..."
    puts "Generates thumbnails from Blender files."
    puts ""
    puts "  --help              Display this help text"
    puts "  --no-render         Don't render and instead just combine the images (for debugging)"
    puts "  --resolution RES    Resolution to use for the thumbnail"
    puts "  --output FILE       Write the final thumbnail to FILE"
    puts "  --layout LAYOUT     Layout of the thumbnail (ex: [['90,0,0'],['-90,0,0']])"
    puts ""
    puts "Report bugs to <grumbel@gmx.de>"
    exit(0)

  when '--no-render'
    $cfg_render = false

  when '--resolution'
    $cfg_resolution = arg

  when '--output'
    $cfg_output = arg

  when '--layout'
    $cfg_layout = eval(arg)

  else
    puts "Some error!?!"
    exit(1)
  end
}

ARGV.each{|filename|
  positions = $cfg_layout.flatten
  outfiles  = positions.map{|name| "/tmp/render-#{name}.png" }

  if $cfg_render then
    # render the graphics
    ENV["BLEND_THUMB_POS"]        = positions.join(';')
    ENV["BLEND_THUMB_OUTPUT"]     = outfiles.join(';')
    ENV["BLEND_THUMB_RESOLUTION"] = $cfg_resolution
    
    if not system("blender", filename, "-P", $cfg_thumbnail_script) then
      puts "Error while rendering '#{filename}', error code #{$?}"
    end
  end

  images = {}
  outfiles.map{|file| Magick::Image.read(file).first.trim! }.zip($cfg_layout.flatten).each{|v, k|
    images[k] = v
  }

  spacing = 16
  width  = 0
  height = spacing
  
  puts "Composing final image"
  gc = Magick::Draw.new()
  $cfg_layout.each{|lst|
    this_height = lst.map{|i| images[i].rows}.max
    x = spacing
    lst.each{|name|
      image = images[name]
      gc.composite(x, height + (this_height - image.rows)/2, 0, 0, image)
      x += image.columns + spacing
    }

    height += lst.map{|i| images[i].rows}.max + spacing
    width   = [width, lst.map{|i| images[i].columns + spacing}.inject(0){|t,v| t + v} + spacing].max
  }
  # puts "OutImage: #{width} #{height}"
  outimage = Magick::Image.new(width, height, Magick::HatchFill.new("#78b", "#abd", 32))
  gc.draw(outimage)

  puts "Writing final image to '#{$cfg_output}'"
  outimage.write($cfg_output)
}

# EOF #
